(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.React = {}));
})(this, (function (exports) { 'use strict';

	/*
	 * @Author: wy
	 * @Date: 2024-03-27 17:10:48
	 * @LastEditors: wy
	 * @LastEditTime: 2024-03-28 11:25:19
	 * @FilePath: /react-source-learn/packages/react/src/currentDispatcher.ts
	 * @Description:
	 */
	const currentDispatcher = {
	    current: null,
	};
	const resolveDispatcher = () => {
	    const dispatcher = currentDispatcher.current;
	    if (dispatcher === null) {
	        throw new Error('hook只能在函数组件中使用');
	    }
	    return dispatcher;
	};

	/*
	 * @Author: wy
	 * @Date: 2024-02-26 15:48:33
	 * @LastEditors: wy
	 * @LastEditTime: 2024-02-26 15:51:11
	 * @FilePath: /笔记/react-source-learn/packages/shared/ReactSymbols.ts
	 * @Description:
	 */
	const supportSymbol = typeof Symbol === 'function' && Symbol.for; // 判断是否支持symbol
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	/* eslint-disable valid-typeof */
	/*
	 * @Author: wy
	 * @Date: 2024-02-26 15:44:03
	 * @LastEditors: wy
	 * @LastEditTime: 2024-04-07 14:42:31
	 * @FilePath: /react-source-learn/packages/react/src/jsx.ts
	 * @Description:
	 */
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        _mark: 'wy set',
	    };
	    return element;
	};
	// jsx 方法
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    // key 和 ref 是特殊的props
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        // 确定config[prop]是config自带的，而不是原型上的
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    const childrenLen = maybeChildren.length;
	    if (childrenLen) {
	        if (childrenLen === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	function isValidElement$1(object) {
	    return (typeof object === 'object' &&
	        object !== null &&
	        object.$$typeof === REACT_ELEMENT_TYPE);
	}

	/*
	 * @Author: wy
	 * @Date: 2024-02-26 17:21:07
	 * @LastEditors: wy
	 * @LastEditTime: 2024-04-07 14:23:30
	 * @FilePath: /react-source-learn/packages/react/index.ts
	 * @Description:
	 */
	const useState = (initialState) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useState(initialState);
	};
	// 内部共享数据
	const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
	    currentDispatcher,
	};
	const version = '0.0.0';
	const createElement = jsx;
	const isValidElement = isValidElement$1;

	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
	exports.createElement = createElement;
	exports.isValidElement = isValidElement;
	exports.useState = useState;
	exports.version = version;

}));
