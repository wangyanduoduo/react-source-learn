(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	/*
	 * @Author: wy
	 * @Date: 2024-02-26 15:48:33
	 * @LastEditors: wy
	 * @LastEditTime: 2024-02-26 15:51:11
	 * @FilePath: /笔记/react-source-learn/packages/shared/ReactSymbols.ts
	 * @Description:
	 */
	const supportSymbol = typeof Symbol === 'function' && Symbol.for; // 判断是否支持symbol
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	/*
	 * @Author: wy
	 * @Date: 2024-02-26 15:44:03
	 * @LastEditors: wy
	 * @LastEditTime: 2024-02-26 18:35:59
	 * @FilePath: /笔记/react-source-learn/packages/react/src/jsx.ts
	 * @Description:
	 */
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        _mark: 'wy set',
	    };
	    return element;
	};
	// jsx 方法
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    // key 和 ref 是特殊的props
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        // 确定config[prop]是config自带的，而不是原型上的
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	        const childrenLen = maybeChildren.length;
	        if (childrenLen) {
	            if (childrenLen === 1) {
	                props.children = maybeChildren[0];
	            }
	            else {
	                props.children = maybeChildren;
	            }
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	/*
	 * @Author: wy
	 * @Date: 2024-02-26 17:21:07
	 * @LastEditors: wy
	 * @LastEditTime: 2024-02-26 17:22:02
	 * @FilePath: /笔记/react-source-learn/packages/react/index.ts
	 * @Description:
	 */
	var index = {
	    version: '0.0.0',
	    createElement: jsx,
	};

	return index;

}));
