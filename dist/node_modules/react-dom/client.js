(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

	const FunctionComponent = 0;
	const HostRoot = 3; //项目挂载的跟节点
	const HostComponent = 5; // dom元素 比如div
	const HostText = 6;

	const NoFlags = /*                      */ 0b0000000000000000000000000000;
	const Placement = /*                    */ 0b0000000000000000000000000010;
	// You can change the rest (and add more).
	const Update = /*                       */ 0b0000000000000000000000000100;
	const ChildDeletion = /*                */ 0b0000000000000000000000010000;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    tag; // fiberNode 是什么类型的节点
	    ref;
	    key;
	    stateNode; // 当前fiberNode对应的真实的dom 例如 div hostRootFiber的stateNode指向fiberRootNode
	    type; // 对应的element的函数， 例如functionComponent的函数
	    return;
	    sibling;
	    child;
	    alternate; // current 和 wip 之间的fiberNode相互指向
	    index; // 同级别有很多元素，依次为0，1，2，3。。。
	    pendingProps; // 在fiberNode作为工作单元刚开始工作的时候的props
	    memoizedProps; // 在fiberNode作为工作单元结束工作的时候props
	    updateQueue;
	    memoizedState;
	    flags; // 当前节点的操作类型 例如 插入，删除 flags 被统称为副作用
	    subtreeFlags; // 子树的操作类型
	    constructor(tag, pendingProps, key) {
	        this.tag = tag;
	        this.ref = null;
	        this.key = key;
	        this.stateNode = null;
	        this.type = null;
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        this.index = 0;
	        this.alternate = null;
	        this.pendingProps = pendingProps;
	        this.memoizedProps = null;
	        this.updateQueue = null;
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	    }
	}
	/**
	 * 指向hostRootFiber跟节点的fiberNode
	 */
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.type = current.type;
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags; // 初始化所有副作用
	        wip.subtreeFlags = NoFlags; // 初始化所有副作用
	    }
	    // 复用current中的部分属性
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // div type: div
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	/*
	 * @Author: wy
	 * @Date: 2024-02-27 18:05:43
	 * @LastEditors: wy
	 * @LastEditTime: 2024-02-28 11:09:50
	 * @FilePath: /笔记/react-source-learn/packages/react-reconciler/src/ReactFiberClassUpdateQueue.ts
	 * @Description:
	 */
	const createUpdate = (action) => {
	    return {
	        action,
	    };
	};
	/**
	 *
	 * createUpdateQueue 对应源码中 initializeUpdateQueue
	 */
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null,
	        },
	    };
	};
	/**
	 * 向updateQueue中增加update
	 */
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	/**
	 * 处理updateQueue中的update
	 * update中的action包含state
	 *
	 * 源码中不是这样的
	 * 现在是伪代码
	 */
	const processUpdateQueue = (baseState, pendingState) => {
	    const result = {
	        memoizedState: baseState,
	    };
	    if (pendingState) {
	        const action = pendingState.action;
	        if (action instanceof Function) {
	            result.memoizedState = action(baseState);
	        }
	        else {
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	/*
	 * @Author: wy
	 * @Date: 2024-02-26 15:48:33
	 * @LastEditors: wy
	 * @LastEditTime: 2024-02-26 15:51:11
	 * @FilePath: /笔记/react-source-learn/packages/shared/ReactSymbols.ts
	 * @Description:
	 */
	const supportSymbol = typeof Symbol === 'function' && Symbol.for; // 判断是否支持symbol
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	/*
	 * @Author: wy
	 * @Date: 2024-03-25 11:37:36
	 * @LastEditors: wy
	 * @LastEditTime: 2024-03-25 14:29:08
	 * @FilePath: /react-source-learn/packages/react-reconciler/src/ReactChildFiber.ts
	 * @Description:
	 */
	function childReconciler(shouldTrackEffects) {
	    function reconcileSingleElement(returnFiber, currentFiber, newChild) {
	        const fiber = createFiberFromElement(newChild);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 定义是否shouldTrackEffects
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function reconcilerChildFibers(returnFiber, currentFiber, newChild) {
	        // todo
	        // 根据新的reactElement生成fiberNode
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        return null;
	    };
	}
	const reconcileChildrenFibers = childReconciler(true);
	const mountChildrenFibers = childReconciler(false);

	const renderWithHooks = (wip) => {
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    const child = Component(props);
	    return child;
	};

	/**
	 * 寻找子节点
	 * @param fiber
	 * @returns
	 */
	const beginWork = (wip) => {
	    const tag = wip.tag;
	    switch (tag) {
	        case HostRoot:
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case FunctionComponent:
	            return updateFunctionComponent(wip);
	        case HostText:
	            return null;
	        default:
	            {
	                console.warn('beginWork还未实现的类型');
	            }
	            return null;
	    }
	};
	/**
	 * processUpdateQueue计算状态的最新值
	 *
	 */
	const updateHostRoot = (wip) => {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending; // 新的属性，用于更新赋值
	    updateQueue.shared.pending = null; // 新值被使用了，就把新值变成null
	    // 开始更新
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    wip.memoizedState = memoizedState;
	    // 创建子fiberNode
	    const nextChildren = wip.memoizedState;
	    reconcilerChildren(wip, nextChildren);
	    return wip.child;
	};
	// 元素节点没有更新操作，只生成子fiberNode
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcilerChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateFunctionComponent(wip) {
	    reconcilerChildren(wip, renderWithHooks(wip));
	    return wip.child;
	}
	function reconcilerChildren(wip, children) {
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildrenFibers(wip, current.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildrenFibers(wip, null, children);
	    }
	}

	const createInstance = (type) => {
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	/*
	 * @Author: wy
	 * @Date: 2024-03-26 10:36:42
	 * @LastEditors: wy
	 * @LastEditTime: 2024-03-27 10:25:09
	 * @FilePath: /react-source-learn/packages/react-reconciler/src/ReactFiberCommitWork.ts
	 * @Description:
	 */
	/**
	 * 向下查找，找到fiberNode的节点是不是需要做副作用操作
	 */
	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    console.warn('commitMutationEffects开始');
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        // 不是叶子结点且有mutation,需要执行effect,向下查找，下面的节点有没有需要effect的
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            // 没有effect的节点了，开始向上遍历，在向上遍历的时候，开始真正的操作effect
	            // 开始查找兄弟节点
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                // 兄弟节点查找完成，向上遍历
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	function commitMutationEffectsOnFiber(finishedWork) {
	    const flags = finishedWork.flags;
	    // 插入
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement; // 插入完成了，把完成的标记取消
	    }
	}
	const commitPlacement = (finishedWork) => {
	    {
	        console.warn('执行placement操作');
	    }
	    // parentDOM 用于插入
	    const hostParent = getHostParent(finishedWork);
	    // // 开始找被插入的节点Dom
	    if (hostParent) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	/**
	 * 可以插入元素的父节点有HostComponent HostRoot的父节点
	 */
	const getHostParent = (finishedWork) => {
	    let parent = finishedWork.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        if (parentTag === HostComponent) {
	            return parent.stateNode; // 对应的真实dom
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到host parent');
	    }
	    return null;
	};
	/**
	 * 需要被插入的节点，这些节点就是HostComponent HostText对应的节点
	 */
	const appendPlacementNodeIntoContainer = (finishedWork, hostParent) => {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    // // 继续查找需要被插入的节点
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	};

	/*
	 * @Author: wy
	 * @Date: 2024-02-27 15:37:10
	 * @LastEditors: wy
	 * @LastEditTime: 2024-03-27 11:27:09
	 * @FilePath: /react-source-learn/packages/react-reconciler/src/ReactFiberCompleteWork.ts
	 * @Description:
	 */
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 构建dom
	                // dom插入dom树
	                // const instance = createInstance(wip.type, newProps);
	                const instance = createInstance(wip.type);
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 构建dom
	                const instance = createTextInstance(newProps.content);
	                // dom插入dom树
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completeWork', wip);
	            }
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node; //
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	/*
	 * @Author: wy
	 * @Date: 2024-02-27 15:34:40
	 * @LastEditors: wy
	 * @LastEditTime: 2024-03-27 10:11:32
	 * @FilePath: /react-source-learn/packages/react-reconciler/src/ReactFiberWorkLoop.ts
	 * @Description:
	 */
	let workInProgressRoot; // 正在被执行的fiberNode
	/**
	 * 初始化操作，把workInProgressRoot指向第一个fiberNode,对应根节点
	 * @param root
	 */
	function prepareFreshStack(root) {
	    // root.current->hostRootFiber
	    workInProgressRoot = createWorkInProgress(root.current, {});
	}
	/**
	 * 目的是获取到fiberRootNode
	 */
	function scheduleUpdateOnFiber(fiberNode) {
	    const root = markUpdateFromFiberToRoot(fiberNode);
	    renderRoot(root);
	}
	/**
	 * 通过fiberNode向上寻找到fiberRootNode
	 */
	function markUpdateFromFiberToRoot(fiberNode) {
	    let node = fiberNode;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    // 当前事hostRootFiber
	    if (node.tag == HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	/**
	 * 触发更新的api调用这些方法
	 */
	function renderRoot(root) {
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('workLoop出错', e);
	            }
	            workInProgressRoot = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    /**
	     * commit 阶段包含如下2个步骤
	     * - beforeMutation
	     * - mutation
	     * layout
	     */
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	function workLoop() {
	    while (workInProgressRoot !== null) {
	        performUnitOfWork(workInProgressRoot);
	    }
	}
	// 递操作
	function performUnitOfWork(fiber) {
	    const next = beginWork(fiber); // 子fiberNode
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next !== null) {
	        // next存在继续递操作
	        workInProgressRoot = next;
	    }
	    else {
	        // next不存在归操作
	        completeUnitWork(fiber);
	    }
	}
	// 归操作
	function completeUnitWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgressRoot = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgressRoot = node;
	    } while (node !== null);
	}

	/**
	 * 返回fiberRootNode节点
	 * const root = ReactDOM.createRoot(document.getElementById('root'));
	 * createRoot触发createContainer
	 */
	const createContainer = (container) => {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue(); // 连接更新机制
	    return root;
	};
	/**
	 * render触发updateContainer
	 * root.render(<App />);在updateContainer中使用的就是element=<app>
	 * 更新的时候，也需要container
	 * 需要把这个方法和workLoop中的renderRoot连接起来
	 */
	const updateContainer = (element, root) => {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	};

	/*
	 * @Author: wy
	 * @Date: 2024-03-26 14:23:52
	 * @LastEditors: wy
	 * @LastEditTime: 2024-03-26 18:13:08
	 * @FilePath: /react-source-learn/packages/react-dom/src/root.ts
	 * @Description:
	 */
	// ReactDOM.createRoot(root).render(<app>)
	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        },
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	/*
	 * @Author: wy
	 * @Date: 2024-03-26 14:21:40
	 * @LastEditors: wy
	 * @LastEditTime: 2024-03-26 14:55:13
	 * @FilePath: /react-source-learn/packages/react-dom/index.ts
	 * @Description:
	 */

	return ReactDOM;

}));
